{"version":3,"sources":["components/Decrypt.js","redux/ducks/guess.js","logic/encrypt.js","services/QuotableAPI.js","redux/ducks/quote.js","redux/ducks/score.js","components/Encrypt.js","components/Header.js","components/Home.js","App.js","redux/store.js","reportWebVitals.js","index.js"],"names":["Decrypt","className","SET_GUESS_KEY_MAP","SET_GUESS_KEY_MAP_PROPERTY","SET_HINTED","ADD_HINTED","initialState","guessKeyMap","hinted","setGuessKeyMap","payload","type","setGuessKeyMapProperty","key","map","setHinted","encrypt","str","keyMap","replace","letter","QuotableAPI","getRandomQuote","a","url","fetch","response","json","SET_QUOTE","SET_AUTHOR","SET_TAGS","SET_KEY_MAP","SET_ENCRYPTED_QUOTE","quote","author","tags","encryptedQuote","setRandomQuoteFromAPI","dispatch","then","data","content","toLowerCase","remainingLetters","Object","values","forEach","remainingValidLetters","randomLetter","Math","floor","random","length","buildRandomKeyMap","keys","includes","setAuthor","setTags","setKeyMap","setEncryptedQuote","INCREMENT_SCORE","DECREMENT_HINT_PENALTY","score","isFirstRender","isFirstGame","isFirstCorrectSubmit","Encrypt","useDispatch","useSelector","state","quoteReducer","guessReducer","scoreReducer","useState","quoteInput","setQuoteInput","guessInputList","setGuessInputList","showAlert","setShowAlert","alertVariant","setAlertVariant","alertText","setAlertText","open","setOpen","useEffect","newArray","split","char","match","guessChar","join","i","value","onChange","e","target","handleChange","style","width","height","Button","variant","onClick","Form","Control","placeholder","preventDefault","tempKeyMap","tempKeyMapKeys","randomKey","size","prevOpen","Collapse","in","Alert","Header","handleClick","navbarToggler","document","querySelector","classList","contains","click","id","to","activeClassName","exact","Home","App","path","from","reducer","combineReducers","action","tempGuessKeyMap","store","createStore","applyMiddleware","thunk","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","process","getElementById"],"mappings":"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","file":"static/js/main.e8dae799.chunk.js","sourcesContent":["const Decrypt = () => <div className=\"text-center\">Coming soon</div>;\n\nexport default Decrypt;\n","const SET_GUESS_KEY_MAP = 'encrypt-decrypt/guess/setGuessKeyMap';\nconst SET_GUESS_KEY_MAP_PROPERTY = 'encrypt-decrypt/guess/setGuessKeyMapProperty';\nconst SET_HINTED = 'encrypt-decrypt/guess/setHinted';\nconst ADD_HINTED = 'encrypt-decrypt/guess/addHinted';\n\nconst initialState = {\n  guessKeyMap: {},\n  hinted: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_GUESS_KEY_MAP:\n      return { ...state, guessKeyMap: action.payload };\n    case SET_GUESS_KEY_MAP_PROPERTY: {\n      const tempGuessKeyMap = { ...state.guessKeyMap };\n      tempGuessKeyMap[action.key] = action.map;\n      return { ...state, guessKeyMap: tempGuessKeyMap };\n    }\n    case SET_HINTED:\n      return { ...state, hinted: action.payload };\n    case ADD_HINTED:\n      return { ...state, hinted: [...state.hinted, action.payload] };\n    default:\n      return state;\n  }\n};\n\nexport const setGuessKeyMap = (payload) => ({\n  type: SET_GUESS_KEY_MAP,\n  payload,\n});\n\nexport const setGuessKeyMapProperty = (key, map) => ({\n  type: SET_GUESS_KEY_MAP_PROPERTY,\n  key,\n  map,\n});\n\nexport const setHinted = (payload) => ({\n  type: SET_HINTED,\n  payload,\n});\n\nexport const addHinted = (payload) => ({\n  type: ADD_HINTED,\n  payload,\n});\n","const encrypt = (str, keyMap) => str.replace(/\\w/g, (letter) => keyMap[letter]);\n\nexport const buildRandomKeyMap = () => {\n  const keyMap = {};\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let remainingLetters = 'abcdefghijklmnopqrstuvwxyz';\n  Object.values(alphabet).forEach((letter) => {\n    const remainingValidLetters = remainingLetters.replace(letter, '');\n    const randomLetter =\n      remainingValidLetters[Math.floor(Math.random() * remainingValidLetters.length)];\n    keyMap[letter] = randomLetter;\n    remainingLetters = remainingLetters.replace(randomLetter, '');\n  });\n  return keyMap;\n};\n\nexport default encrypt;\n","export default class QuotableAPI {\n  static #BASE_URL = 'https://api.quotable.io';\n\n  static getRandomQuote = async () => {\n    const url = `${this.#BASE_URL}/random`;\n    const response = await fetch(url);\n    return response.json();\n  };\n}\n","import encrypt, { buildRandomKeyMap } from '../../logic/encrypt';\nimport QuotableAPI from '../../services/QuotableAPI';\n\nconst SET_QUOTE = 'encrypt-decrypt/quote/setQuote';\nconst SET_AUTHOR = 'encrypt-decrypt/quote/setAuthor';\nconst SET_TAGS = 'encrypt-decrypt/quote/setTags';\nconst SET_KEY_MAP = 'encrypt-decrypt/quote/setKeyMap';\nconst SET_ENCRYPTED_QUOTE = 'encrypt-decrypt/quote/setEncryptedQuote';\n\nconst initialState = {\n  quote: '',\n  author: '',\n  tags: [],\n  keyMap: {},\n  encryptedQuote: '',\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_QUOTE:\n      return { ...state, quote: action.payload };\n    case SET_AUTHOR:\n      return { ...state, author: action.payload };\n    case SET_TAGS:\n      return { ...state, tags: action.payload };\n    case SET_KEY_MAP:\n      return { ...state, keyMap: action.payload };\n    case SET_ENCRYPTED_QUOTE:\n      return { ...state, encryptedQuote: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport const setQuote = (payload) => ({\n  type: SET_QUOTE,\n  payload,\n});\n\nexport const setAuthor = (payload) => ({\n  type: SET_AUTHOR,\n  payload,\n});\n\nexport const setTags = (payload) => ({\n  type: SET_TAGS,\n  payload,\n});\n\nexport const setKeyMap = (payload) => ({\n  type: SET_KEY_MAP,\n  payload,\n});\n\nexport const setEncryptedQuote = (payload) => ({\n  type: SET_ENCRYPTED_QUOTE,\n  payload,\n});\n\nexport const setRandomQuoteFromAPI = () => (dispatch) => {\n  QuotableAPI.getRandomQuote().then((data) => {\n    const { content, author, tags } = data;\n    const quote = content.toLowerCase();\n    const keyMap = buildRandomKeyMap();\n    Object.keys(keyMap).forEach((key) => {\n      if (!quote.includes(key)) delete keyMap[key];\n    });\n    const encryptedQuote = encrypt(quote, keyMap);\n    dispatch(setQuote(quote));\n    dispatch(setAuthor(author));\n    dispatch(setTags(tags));\n    dispatch(setKeyMap(keyMap));\n    dispatch(setEncryptedQuote(encryptedQuote));\n  });\n};\n","const INCREMENT_SCORE = 'encrypt-decrypt/score/incrementScore';\nconst DECREMENT_HINT_PENALTY = 'encrypt-decrypt/score/decrementHintPenalty';\n\nconst initialState = {\n  score: 0,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case INCREMENT_SCORE:\n      return { ...state, score: state.score + 10 };\n    case DECREMENT_HINT_PENALTY:\n      return { ...state, score: state.score - 1 };\n    default:\n      return state;\n  }\n};\n\nexport const incrementScore = () => ({\n  type: INCREMENT_SCORE,\n});\n\nexport const decrementHintPenalty = () => ({\n  type: DECREMENT_HINT_PENALTY,\n});\n","/* eslint-disable react/no-array-index-key */\n\nimport { useEffect, useState } from 'react';\nimport { Alert, Button, Collapse, Form } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addHinted, setGuessKeyMap, setGuessKeyMapProperty, setHinted } from '../redux/ducks/guess';\nimport { setRandomQuoteFromAPI } from '../redux/ducks/quote';\nimport { decrementHintPenalty, incrementScore } from '../redux/ducks/score';\n\nlet isFirstRender = true;\nlet isFirstGame = true;\nlet isFirstCorrectSubmit = true;\nconst Encrypt = () => {\n  const dispatch = useDispatch();\n  const quote = useSelector((state) => state.quoteReducer.quote);\n  const author = useSelector((state) => state.quoteReducer.author);\n  const tags = useSelector((state) => state.quoteReducer.tags);\n  const keyMap = useSelector((state) => state.quoteReducer.keyMap);\n  const encryptedQuote = useSelector((state) => state.quoteReducer.encryptedQuote);\n  const guessKeyMap = useSelector((state) => state.guessReducer.guessKeyMap);\n  const hinted = useSelector((state) => state.guessReducer.hinted);\n  const score = useSelector((state) => state.scoreReducer.score);\n  const [quoteInput, setQuoteInput] = useState('');\n  const [guessInputList, setGuessInputList] = useState([]);\n  const [showAlert, setShowAlert] = useState(false);\n  const [alertVariant, setAlertVariant] = useState('');\n  const [alertText, setAlertText] = useState('');\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    if (isFirstRender) {\n      dispatch(setRandomQuoteFromAPI());\n      isFirstRender = false;\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    const newArray = encryptedQuote\n      .split('')\n      .map((char) => (char.match(/^\\w$/) ? guessKeyMap[char] || '' : char));\n    setGuessInputList(newArray);\n    setQuoteInput(newArray.map((guessChar) => (guessChar === '' ? '_' : guessChar)).join(''));\n  }, [guessKeyMap, encryptedQuote]);\n\n  const handlePlayAgain = () => {\n    dispatch(setRandomQuoteFromAPI());\n    dispatch(setGuessKeyMap({}));\n    dispatch(setHinted([]));\n    setShowAlert(false);\n    isFirstGame = false;\n    isFirstCorrectSubmit = true;\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (quoteInput === quote) {\n      setAlertVariant('success');\n      setAlertText('Correct! Click on \"Get another one\" to play again.');\n      if (isFirstCorrectSubmit) {\n        dispatch(incrementScore());\n        isFirstCorrectSubmit = false;\n      }\n    } else {\n      setAlertVariant('danger');\n      setAlertText(\"Incorrect! Please try again. Make sure you're including punctuation.\");\n    }\n    setShowAlert(true);\n  };\n\n  const handleChange = (char, e) => {\n    if (e.target.value.match(/^\\w?$/)) {\n      dispatch(setGuessKeyMapProperty(char, e.target.value));\n    }\n  };\n\n  const handleHint = () => {\n    const tempKeyMap = { ...keyMap };\n    Object.values(guessKeyMap).forEach((value) => {\n      if (tempKeyMap[value]) delete tempKeyMap[value];\n    });\n    if (Object.keys(tempKeyMap).length > 0) {\n      const tempKeyMapKeys = Object.keys(tempKeyMap);\n      const randomKey = tempKeyMapKeys[Math.floor(Math.random() * tempKeyMapKeys.length)];\n      dispatch(setGuessKeyMapProperty(tempKeyMap[randomKey], randomKey));\n      dispatch(addHinted(randomKey));\n      dispatch(decrementHintPenalty());\n    }\n  };\n\n  const handleClear = () => {\n    dispatch(setGuessKeyMap({}));\n    dispatch(setHinted([]));\n  };\n\n  return (\n    <div className=\"pt-5\">\n      <p className=\"pt-3 text-end\">Score: {score}</p>\n      {isFirstGame && (\n        <div>\n          <p className=\"lead fs-2\">{encryptedQuote}</p>\n          <p className=\"mb-1\">decrypts to</p>\n          <p className=\"mb-1 text-success\">{quote}</p>\n          <p>\n            Please note that every letter is replaced by another letter, respecting the only rule\n            that if this letter repeats in the sentence, it will be replaced by the same other\n            letter. Now you&apos;re ready to start playing!\n          </p>\n        </div>\n      )}\n      {!isFirstGame && (\n        <div>\n          <p className=\"lead fs-2\">{encryptedQuote}</p>\n          <div className=\"d-flex flex-wrap\">\n            {encryptedQuote.split('').map((char, i) => (\n              <div key={i} className=\"d-flex flex-column mb-2\">\n                {char.match(/^\\w$/) ? (\n                  <input\n                    type=\"text\"\n                    className={`guessInput${hinted.includes(guessInputList[i]) ? ' hinted' : ''}`}\n                    value={guessInputList[i]}\n                    onChange={(e) => handleChange(char, e)}\n                  />\n                ) : (\n                  <div style={{ width: '20px', height: '25px' }} />\n                )}\n                <span className=\"text-center\">{char}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      <Button className=\"mb-3\" variant=\"primary\" onClick={handlePlayAgain}>\n        {isFirstGame ? 'Start playing' : 'Get another one'}\n      </Button>\n      {!isFirstGame && (\n        <>\n          <Form className=\"mb-3\">\n            <Form.Control\n              className=\"mb-2\"\n              type=\"text\"\n              placeholder=\"Enter decrypted quote\"\n              value={quoteInput}\n              onChange={(e) => setQuoteInput(e.target.value)}\n            />\n            <Button className=\"mx-1\" variant=\"primary\" type=\"submit\" onClick={handleSubmit}>\n              Submit\n            </Button>\n            <Button className=\"mx-1\" variant=\"secondary\" type=\"button\" onClick={handleHint}>\n              Hint\n            </Button>\n            <Button className=\"mx-1\" variant=\"danger\" type=\"button\" onClick={handleClear}>\n              Clear\n            </Button>\n          </Form>\n          <Button\n            className=\"mb-2\"\n            variant=\"outline-info\"\n            size=\"sm\"\n            onClick={() => setOpen((prevOpen) => !prevOpen)}\n          >\n            Check quote info\n          </Button>\n          <Collapse in={open}>\n            <div>\n              <p className=\"mb-1\">Author: {author}</p>\n              <p className=\"mb-1\">Tags: {tags.join(', ')}</p>\n            </div>\n          </Collapse>\n        </>\n      )}\n      {showAlert && <Alert variant={alertVariant}>{alertText}</Alert>}\n    </div>\n  );\n};\n\nexport default Encrypt;\n","import { AiOutlineMenu } from 'react-icons/ai';\nimport { NavLink } from 'react-router-dom';\n\nconst Header = () => {\n  const handleClick = () => {\n    const navbarToggler = document.querySelector('.navbar-toggler');\n    if (!navbarToggler.classList.contains('collapsed')) navbarToggler.click();\n  };\n  return (\n    <header>\n      <nav className=\"navbar navbar-expand-md bg-light fixed-top\">\n        <div className=\"container-fluid\">\n          <span className=\"navbar-brand\">Encrypt - Decrypt</span>\n          <button\n            className=\"navbar-toggler collapsed asdf asdf2\"\n            type=\"button\"\n            data-bs-toggle=\"collapse\"\n            data-bs-target=\"#navbarNav\"\n            aria-controls=\"navbarNav\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <AiOutlineMenu className=\"fs-3\" />\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul className=\"navbar-nav ms-auto\">\n              <li className=\"nav-item\">\n                <NavLink to=\"/\" activeClassName=\"active-link\" onClick={handleClick} exact>\n                  Home\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink to=\"/encrypt\" activeClassName=\"active-link\" onClick={handleClick} exact>\n                  Encrypt\n                </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink to=\"/decrypt\" activeClassName=\"active-link\" onClick={handleClick} exact>\n                  Decrypt\n                </NavLink>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </nav>\n    </header>\n  );\n};\n\nexport default Header;\n","const Home = () => (\n  <div className=\"lead fs-2 pt-5\">\n    <p className=\"pt-3\">\n      Welcome to Encrypt - Decrypt! In this site, you will find an encryption game and a decryption\n      feature. The goal of the game is simple: Try to decrypt the sentence! Every sentence will be\n      in english. Tip: Each encrypted letter is the same for the whole sentence.\n    </p>\n    <p>\n      You can also test the machine with your own sentences. Try encrypting any sentence by yourself\n      and input it into the decryption feature and it will return your original sentence! You could\n      also use this feature as a last resource to decrypt sentences from the encryption game.\n    </p>\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Decrypt from './components/Decrypt';\nimport Encrypt from './components/Encrypt';\nimport Header from './components/Header';\nimport Home from './components/Home';\n\nconst App = () => (\n  <>\n    <Header />\n    <main className=\"bg-dark text-white min-vh-100 d-flex flex-column justify-content-center\">\n      <div className=\"container-md\">\n        <div className=\"row mx-0 justify-content-center\">\n          <div className=\"col-md-9\">\n            <Switch>\n              <Route exact path=\"/\">\n                <Home />\n              </Route>\n              <Route path=\"/encrypt\">\n                <Encrypt />\n              </Route>\n              <Route path=\"/decrypt\">\n                <Decrypt />\n              </Route>\n              <Redirect from=\"*\" to=\"/\" />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </main>\n  </>\n);\n\nexport default App;\n","import { applyMiddleware, combineReducers, createStore } from 'redux';\nimport thunk from 'redux-thunk';\nimport guessReducer from './ducks/guess';\nimport quoteReducer from './ducks/quote';\nimport scoreReducer from './ducks/score';\n\nconst reducer = combineReducers({\n  quoteReducer,\n  guessReducer,\n  scoreReducer,\n  // additional reducers could be added here\n});\n\nconst store = createStore(reducer, applyMiddleware(thunk));\n\nexport default store;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport store from './redux/store';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router basename={process.env.PUBLIC_URL}>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}